"""
Django settings for alsalam_app project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path
from django.utils.translation import gettext_lazy as _
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-c)p34-gm0k43u0=4afsaj(9&ssa1**ilz&yb=^*sfr5fxyr@c#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True       # <-- allows any origin
CORS_ALLOW_CREDENTIALS = True       # if you need cookies or Authorization headers

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',            # Admin interface
    'django.contrib.auth',             # Authentication system
    'django.contrib.contenttypes',     # Needed for content types framework
    'django.contrib.sessions',         # Session framework
    'django.contrib.messages',         # Messaging framework
    'django.contrib.staticfiles',      # Static file management
    # Third-party
    'rest_framework',                  # Django REST framework
    'corsheaders',
    'drf_spectacular',
    'localflavor',
    'modeltranslation',
    'rest_framework_simplejwt.token_blacklist',
    "anymail",
    "rangefilter",
    # Your app
    'api_core',                        # Your custom app
]

MIDDLEWARE = [

    # Must be high in the list for CORS headers to be added before others process the request
    'corsheaders.middleware.CorsMiddleware',

    # Handles things like language selection from headers
    'django.middleware.locale.LocaleMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    # Must be after SessionMiddleware
    'django.middleware.common.CommonMiddleware',

    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',

    # Relies on AuthenticationMiddleware
    'django.contrib.messages.middleware.MessageMiddleware',

    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGIN_REGEXES = [
    r'^.*$',
]

# Permit credentialed (cookie/JWT) requests
CORS_ALLOW_CREDENTIALS = True
ROOT_URLCONF = 'alsalam_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'alsalam_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE'),
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PWD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT')

    }
}

'''
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.

'''
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

AUTH_USER_MODEL = 'api_core.Users'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
################ ADDED 4 EMAIL ################
# Looking to send emails in production? Check out our Email API/SMTP product!
EMAIL_HOST = 'sandbox.smtp.mailtrap.io'
EMAIL_HOST_USER = '106dc5e60cc09f'
EMAIL_HOST_PASSWORD = 'e4968c7b4ea19f'
EMAIL_PORT = '2525'
#################################################
# Media files (uploaded content like images)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
ALLOWED_HOSTS = ['*']
# CSRF_TRUSTED_ORIGINS = [
#     "http://wecareroot.ddns.net:5595",
#     "http://197.48.253.79:5595"
# ]
CORS_ALLOW_ALL_ORIGINS = True
'''
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        #add them to slove image up
        # 'rest_framework.parsers.MultiPartParser',
        # 'rest_framework.parsers.FormParser',
        # 'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}
'''
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}
SIMPLE_JWT = {
    # How long access tokens last before they expire
    # 1 hour instead of default 5 min
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    # How long refresh tokens last before they expire
    # 7 days instead of default 1 day
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),

    # Other common settings you can adjust:
    # don’t issue new refresh on each use
    # 'ROTATE_REFRESH_TOKENS': False,
    # 'BLACKLIST_AFTER_ROTATION': True,               # blacklist used refresh tokens
    'BLACKLIST_AFTER_ROTATION': True,
    'ROTATE_REFRESH_TOKENS': True,
    'TOKEN_BLACKLIST_ENABLED': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    # …and any of the other Simple JWT settings you need
}
SPECTACULAR_SETTINGS = {
    'TITLE': 'alsalam_app API',
    'DESCRIPTION': 'Alsalam Furniture moving',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
}
USE_I18N = True

LANGUAGE_CODE = 'en-us'

LANGUAGES = [
    ('en', 'English'),
    ('ar', 'Arabic'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'api_core/locale'),
]

                        #JWT
# add to more petter use fir Django api interface
SPECTACULAR_SETTINGS = {
    # … your existing settings …
    'TITLE': 'Your API',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SECURITY': [{'bearerAuth': []}],             # apply by default
    'COMPONENT_SPLIT_REQUEST': True,
    'SECURITY_SCHEMES': {
        'bearerAuth': {
            'type': 'http',
            'scheme': 'bearer',
            'bearerFormat': 'JWT',
        }
    },
}

 #
from corsheaders.defaults import default_headers
from corsheaders.defaults import default_headers as _def_hdrs


# Extend the default safe headers list with your custom header(s)
CORS_ALLOW_HEADERS = list(default_headers) + [
    'x-lang',
    'X-LANG',
    'x-auth-token',      # any others you need

]
# (Optional) If you need the browser to see certain response headers:
CORS_EXPOSE_HEADERS = [
    'Content-Disposition',
    # add any response headers your client needs
]

APPEND_SLASH = False

